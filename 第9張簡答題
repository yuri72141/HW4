第9章
簡答題
1. 請簡單說明物件導向的應用程式開發和傳統應用程式開發的差異?
1. 設計思維不同
•	傳統開發（程序導向）：
程式是由一連串的指令與函數組成，重點在「流程控制」，資料與處理分離。
例如：先讀資料 → 再處理 → 再輸出。
•	物件導向開發（OOP）：
把程式中涉及的事物設計成「物件」，每個物件結合資料（屬性）與操作（方法），強調模組化與重用性。
2. 結構方式不同
•	傳統開發：
使用函式（Function）或程序（Procedure）來執行任務，依賴全域變數，維護與擴充困難。
•	物件導向開發：
使用「類別」來創建「物件」，強調封裝、繼承、多型，利於維護與擴展。
3. 重用與維護性
•	傳統開發：
程式碼較難重用，修改一處可能牽一髮動全身。
•	物件導向開發：
透過類別與繼承，程式碼重用性高，維護時較容易定位與修改。

6. 請舉例說明 private、protected 和 public 三種修飾子的用途和差異?什麽 是「工具方法」(Utility Methods)?
(1) private
•	用途：限制成員只能在定義它的類別內部存取。常用於封裝（Encapsulation），保護內部資料不被外部直接修改。
•	範圍：僅限於當前類別內。
(2) protected
•	用途：允許成員在定義它的類別內部以及其衍生類別（子類別）中存取。常用於繼承場景，保護成員只對繼承階層開放。
•	範圍：當前類別及其所有子類別。
(3) public
•	用途：允許成員對所有程式碼（任何類別、物件或模組）完全開放。常用於公開介面，讓外部程式能與物件互動。
•	範圍：無限制，任何地方都可以存取。
工具方法（Utility Methods）是一些獨立的功能性方法，通常不依賴特定的類別或物件，而是提供通用的功能，供多個部分重複使用。這些方法通常是靜態的（static），可以直接透過類別名稱呼叫，而無需實例化物件。
特點
•	獨立性：不依賴特定物件的狀態。
•	通用性：適用於多種情境，解決常見問題。
•	靜態方法：通常定義為 static 方法。
•	位置：常放在一個專門的工具類（Utility Class）中，例如 MathUtils 或 StringUtils。
